const [watchList, setWatchlist]=useState([
    "GOOGLE", "MSFT", "AMZN"])
const [stock, setStock]=useState();
    

  useEffect(()=>{
    let isMounted = true;
    const fetchData=async ()=>{
        try{
            const response = await finhub.get("/quote",{
                params:{
                    symbol: "AMZN"
                }
            })
            // console.log(response);
               if(isMounted){
                setStock(response.data);
                console.log("mount")
               } 
        }catch(err){
                console.log(err)
        }
    }
fetchData();
return ()=>(isMounted = false)
},[] )  
-==--=-=-=-====================================================================    
this is done with await async pattern and call the api with three symbols data,
and take too time for each symbol data 1, 1.57ms, 2, 677ms, 3, 899ms

    now push() is used to get all responses and push into an empth Array.

const [watchList, setWatchlist]=useState([
    "GOOGLE", "MSFT", "AMZN"])
const [stock, setStock]=useState();
    

  useEffect(()=>{
    let isMounted = true;
    const fetchData=async ()=>{
        const responses =[];
        try{
            const response1 = await finhub.get("/quote",{
                params:{
                    symbol: "AMZN"
                }
            })
            responses.push(response1);
            const response2 = await finhub.get("/quote",{
                params:{
                    symbol: "GOOGL"
                }
            })
            responses.push(response2);

            const response3 = await finhub.get("/quote",{
                params:{
                    symbol: "MSFT"
                }
            })
            responses.push(response3);

            // console.log(response);
               if(isMounted){
                setStock(responses.data);
                console.log("mount")
               } 
        }catch(err){
                console.log(err)
        }
    }
fetchData();
return ()=>(isMounted = false)
},[] )  
    


